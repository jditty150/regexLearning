import java.util.regex.*;
// must put for regular expression


public class regexLearning {

	public static void main(String[] args)
	{
		String exampleString = "Professor Finished In 6 Hours Fuck You Professor";
		String addressStuff = "Jinesh Shah NY  15689   CA  AK  (518)555-7986  monkeydluffy@gmail.com 518-555-7987 518 555-7987";
		String strangeString= "1Z aaaaaaaaaaaaa ***** **** {{{{  {{ {";
		
		// where the actual regex will be most likely
		// [A-Za-z] {2,20}  \\w{2.20}
		// the [] is with the letters while the {} tells how many characters in length
		regexChecker("\\s[A-Za-z]{2,20}\\s", exampleString);

		// \\d meaning looking for characters with lowercase d
		// \\D meaning looking for characters with uppercase D
		// {5} look for it 5 times
		
		// how to look for zip codes which is 5 digits long
		regexChecker("\\s\\d{5}\\s", addressStuff);
		
		//2 characters that start with a C or A
		// A[KLRZ]|C[AOT]
		// those are states that start with the letter A or C with the possilb combinations
		// | this means to also look for A
		
		regexChecker("A[KLRZ]|C[AOT]", addressStuff);
		
		// how to put a regex where you want a minimum but no maximum
		// ex: {5,} 5 is the min but no max specified
		// if you put + inside regular expression it means whatever proceeds must occur 1 or more times
		// if using . + * [] {} () | \ ^ ? requires backslash
		
		regexChecker("(\\{{1,})", strangeString);
		// they are both the same {1,} and {+ are the same because + is 1 or more
		regexChecker("(\\{+)", strangeString);
		// say you wanted to find anything in the string but a new line u need to put .
		// . means anything except new line
		// means that there is 5 of anything in that string
		// in output when using . sometimes u get something like "a *" because the period also matches spaces
		regexChecker(".{5}", strangeString);
		
		// \\w[A-Za-z0-9_]
		// anything is w follows that word type character
		// W is anything not in w
		// \\W
		// * to search for something that matches for 0 or more times
		
		regexChecker("\\w*", strangeString);
		
		// how to put in email address as regex
		// monkeydluffy@gmail.com
		// normally in email address you potentially have upper and lower case letters and numbers
		// [A-Za-z0-9._%-]+@
		// need + because we always need to have 1 or more for emails 
		// everything before @ symbol is what could be in the username
		// everything after @ and before . symbol is what could be as the actual email source
		// everything after . symbol is normally the com part where we make sure it only has 2-4 characters cause only 3 letters
		regexChecker("[A-Za-z0-9._%-]+@[A-Za-z0-9._-]+\\.[A-Za-z]{2,4}", addressStuff);
		
		// want to perform a search but don't exactly know if it exist example is phone numbers
		// 1-(518)555-7986 (518)555-7986 518-555-7987 518 555-7987
		// these are whole bunch of potential phone numbers to test out
		// the first set ([0-9]( |-)?)? meaning the first 1- number could exist it is either a space of a - after number
		// ? means could exist but could not exist
		// the extra ? means that that entire 1- possiblity could not exist as well
		// (\\(?[0-9]{3}\\)?|[0-9]{3})( |-)?
		// must put backslash to protect ()
		// now looking at the parenthesis area number
		// is could have number 0-9 but only 3 of them
		// however that could not exist
		// | means or
		// or we could just have a normal area code but with no ()
		// it could lead to the - for the middle set of the phone number that itself could not exist cause of the () may exist
		// or it could be a space or dash but also could not exist
		// ([0-9]{3}( |-)?
		// this is for the middle of the phone number
		// 0-9 for the actual number and 3 since there is 3 of them
		// at the end it could either be a space or a =
		// there is a ? to make sure it could also not be there
		// [0-9]{4}|[a-zA-Z0-9]{7})
		// 0-9 is for the number and the 4 is because it is the last 4 digits of phone number
		// or people could just type the phone number without area code and just have 7 numbers
		// put all the expressions in there for letters and characters
		regexChecker("([0-9]( |-)?)?(\\(?[0-9]{3}\\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})", addressStuff);
	
		// Let say we wanted to replace regex strings then we need another method
		// after method is name call it under the main method
		
		regexReplace(addressStuff);
		
		// another method to call to replace regex string
		// this time letters
		
		regexSuperReplace(exampleString);
		
	}
	// making the regex work in a seperate method 
	public static void regexChecker(String theRegex, String str2check)
	{
		// create a pattern and have a string that will stand in for regular expression
		Pattern checkRegex = Pattern.compile(theRegex);
		// what you use to match the regex
		Matcher regexMatcher = checkRegex.matcher(str2check);
	
		// find all the matches for the regex so create a while loop
		while(regexMatcher.find())
		{ // find to kick out all of the matches
			if(regexMatcher.group().length() != 0)
			{ // making sure the string that is kicked out has a string
			  System.out.println(regexMatcher.group().trim());
			// trim gets rid of white space
			  
			}
			// this is to get the start regex
			System.out.println("Starting at Position " + regexMatcher.start());
			// this is to get the end regex
			System.out.println("Ending at Position " + regexMatcher.end());
		}
	
	}
	// method to replace regex strings
	public static void regexReplace(String str2Replace)
	{
		// create a pattern to replace the spaces inside of the string
		// put + because it has to be 1 space or more
		Pattern replace = Pattern.compile("\\s+");
		// need to create a regex matcher
		// this matter will match the replacement pattern listed above
		// use trim to get rid of white spaces
		Matcher regexMatcher = replace.matcher(str2Replace.trim());
		// to print out the matcher calling it
		// replaces space with ", "
		System.out.println(regexMatcher.replaceAll(", "));
	}
	public static void regexSuperReplace(String str3Replace)
	{
		// create a pattern to replace letters this time
		// put + because it has to be 1 or more letters
		Pattern replace = Pattern.compile("[A-Za-z]+", Pattern.CASE_INSENSITIVE);
		// need to create a regex matcher
		// this will replace letters 
		// use trim to get rid of white spaces
		Matcher regexMatcher = replace.matcher(str3Replace.trim());
		// to print out matcher calling it
		// replaces it with "z "
		System.out.println(regexMatcher.replaceAll("z, Z "));
	}
}
